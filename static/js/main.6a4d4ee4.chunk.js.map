{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","map","SearchBox","placeholder","handleChange","type","onChange","App","state","monsters","searchField","fetch","then","response","json","users","setState","this","filteredMonster","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAEaA,G,MAAO,SAAAC,GAChB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,8BACHC,IAAI,YAET,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,aCLjBC,G,MAAW,SAACR,GACrB,OACI,qBAAKC,UAAU,YAAf,SAEMD,EAAMG,QAAQM,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCNtBM,G,MAAY,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,aACpC,OACI,uBAAOX,UAAU,SACbY,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCgCPG,G,wDAjCb,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACXC,SAAS,GACTC,YAAY,IAJH,E,gEAQO,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAE,EAAKC,SAAS,CAACP,SAASM,S,+BAG9B,IAAD,SAE0BE,KAAKT,MAA9BC,EAFD,EAECA,SAAUC,EAFX,EAEWA,YACXQ,EAAkBT,EAASU,QAAO,SAACxB,GACvC,OAAOA,EAAQG,KAAKsB,cAAcC,SAASX,EAAYU,kBAGzD,OACE,sBAAK3B,UAAU,MAAf,UACI,iDACA,cAAC,EAAD,CAAWU,YAAY,iBAAiBC,aAAc,SAAAkB,GACpD,EAAKN,SAAS,CAACN,YAAYY,EAAEC,OAAOC,WAEtC,cAAC,EAAD,CAAU7B,QAAWuB,W,GA5BbO,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.6a4d4ee4.chunk.js","sourcesContent":["import './card.style.css';\n\nexport const Card = props =>{\n    return(\n        <div className=\"card-container\">\n            <img src={`https://robohash.org/${props.monster.id}.png?set=set2&size=180x180`}\n                 alt=\"monster\"\n            />\n            <h2>{props.monster.name}</h2>\n            <p>{props.monster.email}</p>\n        </div>\n    )\n}","import {Card} from '../card/card.component';\nimport './card-list.style.css';\n\n\nexport const CardList = (props) => {\n    return(\n        <div className=\"card-list\">\n            {\n              props.monster.map(monster => (\n                <Card key={monster.id} monster={monster}/>\n              ))\n            }\n        </div>\n    )\n}","import './search-box.style.css';\n\n\nexport const SearchBox = ({placeholder, handleChange})=>{\n    return(\n        <input className=\"search\" \n            type='search'\n            placeholder={placeholder} \n            onChange={handleChange}\n        />\n    )\n}","import {Component} from 'react';\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.component';\nimport './App.css';\n\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state = {\n      monsters:[],\n      searchField:\"\",\n    }\n  }\n\n  componentDidMount(){\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response=>response.json())\n    .then(users=>this.setState({monsters:users}));\n  }\n\n  render(){\n    \n    const {monsters, searchField} = this.state;\n    const filteredMonster = monsters.filter((monster)=>{\n      return monster.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n\n    return (\n      <div className=\"App\">\n          <h1>Monster Rolodex</h1>\n          <SearchBox placeholder='Search Monster' handleChange={e=>{\n            this.setState({searchField:e.target.value});\n        }}/>\n          <CardList monster = {filteredMonster}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}